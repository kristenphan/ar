<!--ALL CODE BELOW TESTED AND WORKED!-->
<html>
  <head>
    <!--<meta charset="UTF-8">-->
    <script src="https://aframe.io/releases/1.3.0/aframe.min.js"></script>
  </head>
  <body>
    <!-- showing oredo text in VR -->
    <a-scene background="color: gold">
      <a-text 
        value="!Make Ls Run Great Again!"
        font="https://kristenphan.github.io/ar/assets/fonts/oredo-regular-msdf/oredo-regular-msdf.json"
        color="black"
        negate="false"
        scale="5 5 5"
        position="-2 2 -4">
      </a-text>
    </a-scene>
  </body>
</html>


<!-- HEADER MAGA IN RIGHT POSITION, SCALE, AND LOOPING-->
<!DOCTYPE html>
<html>
<head>
    <script src="https://aframe.io/releases/1.0.4/aframe.min.js"></script>
    <!-- we import arjs version without NFT but with marker + location based support -->
    <script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar.js"></script>
    <!--aframe-extra for a-frame animation-mixer-->
    <script src="https://cdn.jsdelivr.net/gh/donmccurdy/aframe-extras@v6.1.1/dist/aframe-extras.min.js"></script>
    <!--aframe-look-at-component to tell an entity to face towards another entity or position-->
    <script src="https://unpkg.com/aframe-look-at-component@0.8.0/dist/aframe-look-at-component.min.js"></script>
</head>
<body style="margin : 0px; overflow: hidden;">
    <a-scene embedded arjs>
        <a-marker preset="hiro">
            <!--Adding .gltf 3D model with animation and url with same domain to avoid CORS issue-->
            <a-entity position="0 0 0"
                      scale="0.6 0.6 0.6"
                      gltf-model="https://kristenphan.github.io/ar/assets/models/trump/scene.gltf" 
                      animation-mixer>
            </a-entity>
            <!-- Adding header text with custom msdf font with look-at -->
            <a-entity
                position="0 2.2 0"
                animation="property: scale; to: 1.5 1.5 1.5; dir: alternate; loop: true"
                text=
                    "color: black; 
                    align: center; 
                    width: 3; 
                    font: https://kristenphan.github.io/ar/assets/fonts/oredo-regular-msdf/oredo-regular-msdf.json;
                    value: !Make LS Run Great Again!"
                look-at="[camera]">
            </a-entity>
            <!-- Adding body text with look-at-->
            <a-entity
                position="0 1.8 0"
                text=
                    "color: gold; 
                    align: center; 
                    width: 2; 
                    font: kelsonsans;
                    value: What: Weekly 4 km runs\nWhen: Fridays @ 12 PM \nWhere: Edge office"
                look-at="[camera]">
            </a-entity>
        </a-marker>
        <a-entity camera></a-entity>
    </a-scene>
</body>
</html>







<!-- GET LOC + TEMP + ICON URL + ICON UNSUCCESSFULLY -->
<head>
  <title>My A-Frame Scene</title>
  <script src="https://aframe.io/releases/0.9.2/aframe.min.js"></script>
  <script src="https://supereggbert.github.io/aframe-htmlembed-component/dist/build.js"></script>
  <!--aframe-look-at-component to tell an entity to face towards another entity or position-->
  <script src="https://unpkg.com/aframe-look-at-component@0.8.0/dist/aframe-look-at-component.min.js"></script>
</head>
<body>
  <a-scene>
    <a-entity position="0 1.6 -1" htmlembed>
		  <div id="location">Unable to Fetch Weather</div>
      <div id="tempC">No Temp Info.</div>
      <div id="weather-icon-url">No Icon Url Info.</div>
      <img src="" id="weather-icon">
	</a-entity>
  </a-scene>
</body>

// Tutorial url: https://nordicapis.com/how-to-build-an-api-driven-weather-app/
// OpenWeatherMap API key
const api = "1e5664d4684fd1be5667d4ec7583c068";

// Accessing DOM elements
const loc = document.getElementById('location');
const tempC = document.getElementById('tempC');
const iconImg = document.getElementById('weather-icon');
const iconImgUrl = document.getElementById('weather-icon-url');

// Using an event listener to run a function every time the page is loaded
window.addEventListener('load', () => {
    let long;
    let lat;
    // Accesing Geolocation of User
    if (navigator.geolocation) { // Checking if browser supports Geolocation Web API
        navigator.geolocation.getCurrentPosition((position) => {
            // Storing Longitude and Latitude in variables
            long = position.coords.longitude;
            lat = position.coords.latitude;
            const base = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${api}&units=metric`;

            // Using Fetch Web API to get data
            // Current Weather Data API doc: https://openweathermap.org/current
            fetch(base)
                .then((response) => {
                    return response.json(); // Translating the response into a JSON object
                })
                .then((data) => {
                    const place = data.name;
                    const { temp } = data.main; // Storing temperature data by matching data field "temp" from data.main
                    const { icon } = data.weather[0];
                    
                    // Getting URL for the weather icon based in icon id "icon"
                    const iconUrl = `http://openweathermap.org/img/wn/${icon}@2x.png`;

                    // Converting Epoch(Unix) time to GMT
                    loc.textContent = `${place}`;
                    tempC.textContent = `${temp.toFixed(2)} °C Why`;
                    iconImgUrl.textContent = iconUrl;
                    iconImg.src = iconUrl;
                });
        });
    }
});

